name: CheckPlan to Develop
on:
  pull_request:
    branches: [develop]

env:
  PREFIJO: sbc-pruebas-dev
  POSTFIJO: deploy-lambda
  BUCKET: bucket-pruebas-juanfelipe
  LAMBDAFUNCTION: JuanFelipePruebas
  LIMITEDEPESOLAMBDA: 1048576 # Tamaño límite en bytes (1 MB = 1048576 bytes)
  REGION: us-east-1

jobs:
    deploy:
        name: "CheckPlan"
        runs-on: ubuntu-latest
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOP }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOP }}            
 
        steps:
          - name: Checkout Code
            uses: actions/checkout@v2

          - name: Setup Python
            uses: actions/setup-python@v2

          - name: Update Python AWS Cli
            run:  python3 -m pip install --user awscli
          
          - name: Package Lambdas to zip && upload code
            id: Package_Lambdas
            run:  |                  
                  cd login/src 
                  for subcarpeta in */; do
                    nombre_archivo="${subcarpeta%/}.zip"
                    (cd "$subcarpeta" && zip -r "../$nombre_archivo" .)
                    aws s3 --region $REGION cp "$nombre_archivo" s3://$BUCKET
                    aws lambda update-function-code --region $REGION --function-name "${subcarpeta%/}" --s3-bucket $BUCKET --s3-key "$nombre_archivo"
                  done          
                                  

 
          #- name: Package Lambdas to zip
          #  id: Package_Lambdas
          #  run:  |
          #        for dir in */; do
          #          echo "1----"
          #          echo "$dir"
          #          ls
          #          cd $dir
          #          echo "2----"
          #          ls
          #          mkdir -p "$PREFIJO-${dir%?}-$POSTFIJO"
          #          echo "3----"
          #          ls
          #          cd src
          #          echo "4----"
          #          ls
          #          pip install -r ../config/requirements.txt -t ../"$PREFIJO-${dir%?}-$POSTFIJO"
          #          echo "5----"
          #          ls
          #          cd ..
          #          echo "6----"
          #          ls
          #          cp -r src/* "$PREFIJO-${dir%?}-$POSTFIJO"
          #          echo "7----"
          #          ls
          #          cd "$PREFIJO-${dir%?}-$POSTFIJO"
          #          echo "8----"
          #          ls
          #          zip -r ../"$PREFIJO-${dir%?}-$POSTFIJO.zip" .
          #          echo "9----"
          #          ls
          #          cd ..
          #          echo "10----"
          #          ls
          #          pesolambda=$(du -b "$PREFIJO-${dir%?}-$POSTFIJO.zip" | cut -f1)
          #          echo $pesolambda
          #          if [ "$pesolambda" -lt "$LIMITEDEPESOLAMBDA" ]; then
          #            echo "El archivo "$PREFIJO-${dir%?}-$POSTFIJO.zip" es ACEPTADO para conservarse ya que pesa menos de "$LIMITEDEPESOLAMBDA" bytes."
          #          else
          #            echo "El codigo de la función lambda "$PREFIJO-${dir%?}-$POSTFIJO.zip" pesa más de "$LIMITEDEPESOLAMBDA" bytes, por lo tanto es RECHAZADO"
          #            break
          #          fi                    
          #        done
                  
          #- name: Upload Lambdas to S3
          #  id: Upload_Lambdas_to_S3
          #  run:  |
          #      for dir in */; do
          #        echo "----"
          #        echo "$dir"
          #        cd $dir
                  #aws s3 --region $REGION cp "$PREFIJO-${dir%?}-$POSTFIJO.zip" s3://$BUCKET
          #      done
          

          #- name: Update Lambda Code from S3
          #  id: Update_lambda_code_from_S3
          #  run: |                
          #      for dir in */; do                
                  #aws lambda update-function-code --region $REGION --function-name $LAMBDAFUNCTION --s3-bucket $BUCKET --s3-key "$PREFIJO-${dir%?}-$POSTFIJO.zip"
          #        sleep 5s
          #      done



          - name: Update Lambda Configuration
            id: Update_lambda_configuration
            run: |                             
                cd login/config                              
                mkdir -p "lambdas_temp"                
                sudo apt install libghc-yaml-dev                
                yaml2json config.yml > config.json
                cat config.json
                cantidad_lambdas=$(jq '.lambdas | length' config.json)
                echo "cantidad lambdas $cantidad_lambdas"               
                

                for ((i = 0; i < $(jq '.lambdas | length' config.json); i++)); do
                  resultado=$(jq -r '.lambdas['$i']' config.json)
                  if echo "$resultado" | grep -q "dev" && echo "$resultado" | grep -q "stg" && echo "$resultado" | grep -q "pro"; then
                    echo "El resultado contiene 'dev', 'stg' y 'pro'."
                    echo "creado archivo json $i"
                    cat config.json | jq '.lambdas['$i'].'$(jq '.stage' config.json)'' > "lambdas_temp/lambda_$i.json"
                    jq -r '. + {"FunctionName": '$(jq '.lambdas['$i'].FunctionName' config.json)'}' "lambdas_temp/lambda_$i.json" > "archivo_temporal.json" && mv "archivo_temporal.json" "lambdas_temp/lambda_$i.json"
                    aws lambda update-function-configuration --region $REGION --cli-input-json file://lambdas_temp/lambda_$i.json
                  else
                    echo "La lambda '$(jq '.lambdas['$i'].FunctionName' config.json)' no contiene los tres ambientes."
                    break
                  fi
                done                

          #- name: Update Lambda Configuration
          #  id: Update_lambda_configuration
          #  run: | 
          #      AWS_COMMAND="aws lambda update-function-configuration --region $REGION --function-name $LAMBDAFUNCTION"
          #      while IFS= read -r line; do           
          #        if [ -n "$line" ]; then                  
          #          AWS_COMMAND="$AWS_COMMAND $line"
          #        fi
          #      done < login/config/configlambda.txt                           
          #      echo "Ejecutando comando= $AWS_COMMAND"       
                #$AWS_COMMAND
                      
                


